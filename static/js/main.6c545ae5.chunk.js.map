{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","link","image","ingredients","labels","className","map","label","src","alt","ingredient","text","href","target","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","placeholder","recipe","key","url","healthLabels","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAsBeA,MApBf,YAA4D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,OAC9C,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,mBACVD,EAAOE,KAAI,SAACC,GAAD,OACR,uBAAGF,UAAU,kBAAkBE,OAGvC,yBAAKC,IAAKN,EAAOO,IAAI,iBACrB,wBAAIJ,UAAU,uBAAuBL,GACrC,wBAAIK,UAAU,sBACTF,EAAYG,KAAI,SAACI,GAAD,OACb,4BAAKA,EAAWC,UAGxB,uBAAGN,UAAU,qBAAqBO,KAAMX,EAAMY,OAAO,UAArD,6B,MCyCGC,MAtDf,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,YAPtB,mBAONK,EAPM,KAOCC,EAPD,KASbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZfM,WAYe,oBAXdA,qCAUG,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,yBAAKzB,UAAU,OACb,wBAAIA,UAAU,cAAd,gBACA,uBAAGA,UAAU,iBAAb,8FACA,0BAAM4B,SAVQ,SAACC,GACjBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAOmBd,UAAU,gBACnC,2BAAO+B,KAAK,OAAO/B,UAAU,cAAcgC,MAAOnB,EAAQoB,SAf3C,SAACJ,GACpBf,EAAUe,EAAErB,OAAOwB,QAcmEE,YAAY,iCAC9F,4BAAQH,KAAK,SAAS/B,UAAU,kBAAhC,QAEF,yBAAKA,UAAU,WACZW,EAAQV,KAAI,SAACkC,GAAD,OACX,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOjC,MACnBP,MAAOwC,EAAOA,OAAOjC,MACrBN,KAAMuC,EAAOA,OAAOE,IACpBxC,MAAOsC,EAAOA,OAAOtC,MACrBC,YAAaqC,EAAOA,OAAOrC,YAC3BC,OAAQoC,EAAOA,OAAOG,aAAaC,MAAM,EAAG,WCtCpCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.6c545ae5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Recipe({title, link, image, ingredients, labels}) {\n    return (\n        <div className=\"recipes__item\">\n            <div className=\"recipes__labels\">\n                {labels.map((label) => (\n                    <p className=\"recipes__label\">{label}</p>\n                ))}\n            </div>\n            <img src={image} alt=\"Recipe Image\"/>\n            <h2 className=\"recipes__item-title\">{title}</h2>\n            <ul className=\"recipes__item-list\">\n                {ingredients.map((ingredient) => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ul>\n            <a className=\"recipes__item-link\" href={link} target=\"_blank\">Click to see the recipe</a>\n        </div>\n    );\n}\n\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nfunction App() {\n  \n  const APP_ID = process.env.REACT_APP_APP_ID;\n  const APP_KEY = process.env.REACT_APP_APP_KEY;\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('pancakes');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query])\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app__title\">Food Recipes</h1>\n      <p className=\"app__subtitle\">Search your favourite food recipes by typing a dish name or an ingredient you want to use.</p>\n      <form onSubmit={getSearch} className=\"search__form\">\n        <input type=\"text\" className=\"search__bar\" value={search} onChange={updateSearch} placeholder=\"Type something, e.g. 'Pizza'\"/>\n        <button type=\"submit\" className=\"search__button\">Go!</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            link={recipe.recipe.url}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            labels={recipe.recipe.healthLabels.slice(0, 3)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}